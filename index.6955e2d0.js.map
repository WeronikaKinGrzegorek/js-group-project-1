{"mappings":"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","sources":["src/js/add-queue.js","src/js/modal-movie.js","src/js/add-watchlist.js"],"sourcesContent":["import { Notify } from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\nimport { handleMovieClick } from './modal-movie';\n\nconst queueButton = document.querySelector('#queueButtonLibrary');\nlet queue = JSON.parse(localStorage.getItem('movieQueue')) || [];\n\nexport function addToQueue(movieData) {\n  const movieId = movieData.id;\n  const isMovieInQueue = queue.some(movieInQueue => {\n    if (movieInQueue.id === movieId) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n\n  if (!isMovieInQueue) {\n    queue.push(movieData);\n    localStorage.setItem('movieQueue', JSON.stringify(queue));\n    Notify.success(`Added movie \"${movieData.title}\" to queue list.`);\n  } else {\n    Notify.failure(`Movie \"${movieData.title}\" is already in queue list.`);\n  }\n}\n\nexport function displayQueue() {\n  console.log(queue);\n}\n\n// queueButton.addEventListener('click', () => {\n//   displayQueue(queue);\n// });\n","import { showLoader, hideLoader } from './loader.js';\nimport { addToQueue } from './add-queue';\nimport { addToWatchlist } from './add-watchlist.js';\nimport { fetchGenres } from './fetch-genres.js';\nimport { drawMovies } from './draw-movie.js';\nimport { getFilmDetails } from './fetch.js';\n\nconst modal = document.getElementById('movieModal');\n// const modalContent = modal.querySelector('.modal-content');\nconst modalPoster = modal.querySelector('#modalPoster');\nconst modalTitle = modal.querySelector('#modalTitle');\nconst modalRating = modal.querySelector('#modalRating');\nconst modalPopularity = modal.querySelector('#modalPopularity');\nconst modalOriginalTitle = modal.querySelector('#modalOriginalTitle');\nconst modalGenres = modal.querySelector('#modalGenres');\nconst modalOverview = modal.querySelector('#modalOverview');\nconst watchedButton = modal.querySelector('#watchedButton'); // dodaj do obejrzanych\nconst watchlistButton = modal.querySelector('#watchlistButton'); // dodaj do kolejki\nconst trailerLink = modal.querySelector('#trailerLink');\n\nconst BASE_POSTER_PATH = 'https://image.tmdb.org/t/p/w500';\n// const moviesContainer = document.querySelector('.gallery__list');\n// const apiKey = '55e390226d2f3f6feba5afe684a5a044';\n// const loadMoreButton = document.getElementById('loadMore');\n// let currentPage = 1;\n// let data;\nlet movieData;\nlet genres = [];\ndocument.addEventListener('DOMContentLoaded', function () {\n  let currentPage = 1;\n\n  const loadMoreMovies = async () => {\n    try {\n      await drawMovies('', currentPage, 15);\n      currentPage++;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const loadMoreButton = document.getElementById('loadMore');\n  loadMoreButton.addEventListener('click', loadMoreMovies);\n});\n\nasync function fetchGenreOnce(genreId) {\n  if (genres.length === 0) {\n    genres = await fetchGenres();\n  }\n  const foundGenre = genres.find(genre => genre.id === genreId);\n  return foundGenre ? foundGenre.name : 'Nieznany';\n}\n\nfetchGenreOnce();\n\n// function formatDate(dateString) {\n//   const date = new Date(dateString);\n//   return date.getFullYear();\n// }\n\nasync function openModal(movieData) {\n  console.log(movieData);\n  const posterPath = movieData.poster_path\n    ? `${BASE_POSTER_PATH}${movieData.poster_path}`\n    : 'https://moviereelist.com/wp-content/uploads/2019/07/poster-placeholder.jpg';\n\n  // const genreNames = movieData.genres\n  //   .map(genreId => {\n  //     fetchGenreOnce(genreId);\n  //   })\n  //   .join(', ');\n\n  modalPoster.src = posterPath;\n  modalPoster.alt = movieData.title;\n\n  modalTitle.textContent = movieData.title.toUpperCase();\n  modalRating.textContent = movieData.vote_average;\n  modalPopularity.textContent = movieData.popularity;\n  modalOriginalTitle.textContent = movieData.original_title;\n\n  const genreIds = movieData.genres;\n  const genreNames = genreIds.map(async genreId => await fetchGenreOnce(genreId));\n  const resolvedGenreNames = await Promise.all(genreNames);\n\n  modalGenres.textContent = resolvedGenreNames;\n  modalOverview.textContent = movieData.overview;\n\n  watchedButton.addEventListener('click', watched, true);\n\n  watchlistButton.addEventListener('click', que, true); // dodaj do kolejki\n\n  trailerLink.href = `https://www.youtube.com/results?search_query=${movieData.title}+trailer`;\n  modal.style.display = 'block';\n\n  // Dodaj obsługę zdarzenia klawisza \"Esc\" po otwarciu modala.\n  document.addEventListener('keydown', handleEscKey);\n\n  // Dodaj obsługę zamykania modala po kliknięciu w obszar poza nim.\n  modal.addEventListener('click', handleAnyOutsideClick);\n}\n\nfunction que() {\n  addToQueue(movieData); // dodaj do kolejki\n}\n\nfunction watched() {\n  addToWatchlist(movieData);\n}\n\nfunction closeModal() {\n  // const modal = document.getElementById('movieModal');\n  modal.style.display = 'none';\n\n  watchedButton.removeEventListener('click', watched, true);\n  watchlistButton.removeEventListener('click', que, true);\n\n  modal.removeEventListener('click', handleAnyOutsideClick);\n  // Usuń obsługę zdarzenia klawisza \"Esc\" po zamknięciu modala.\n  document.removeEventListener('keydown', handleEscKey);\n}\n\n// Dodaj funkcję obsługującą zdarzenie naciśnięcia klawisza \"Esc\".\nfunction handleEscKey(event) {\n  if (event.key === 'Escape') {\n    closeModal();\n  }\n}\n\nfunction handleAnyOutsideClick(event) {\n  if (event.target === modal) {\n    closeModal();\n  }\n}\n\nexport async function handleMovieClick(event) {\n  try {\n    const movieElement = event.target.closest('.gallery__list-item');\n    console.log(movieElement);\n    // const libraryMovieElement = event.target.closest('.librarylist-item');\n\n    if (movieElement) {\n      const movieId = movieElement.dataset.movieid;\n      console.log(movieId);\n      movieData = await getFilmDetails(movieId);\n\n      await openModal(movieData);\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\n\ndocument.addEventListener('click', handleMovieClick);\n\nconst modalCloseButton = document.getElementById('modalCloseButton');\nmodalCloseButton.addEventListener('click', closeModal);\n\n// try {\n\n// const detailsOfClickedMovie = movieData.map(\n//   ({\n//     poster_path,\n//     genre_ids,\n//     id,\n//     title,\n//     vote_average,\n//     popularity,\n//     original_title,\n//     overview,\n//   }) => {\n//     if (!detailsOfClickedMovie || detailsOfClickedMovie.length === 0) {\n//       return;\n//     }\n//     console.log(detailsOfClickedMovie);\n//     const posterPath = poster_path\n//       ? `${BASE_POSTER_PATH}${poster_path}`\n//       : 'https://moviereelist.com/wp-content/uploads/2019/07/poster-placeholder.jpg';\n\n//     const genreNames = genre_ids\n//       .map(genreId => {\n//         fetchGenreOnce(genreId);\n//       })\n//       .join(', ');\n\n//     const trailerLinkUrl = `https://www.youtube.com/results?search_query=${title}+trailer`;\n\n//     return ` <div class=\"modal-content\">\n//     <span id=\"modalCloseButton\" class=\"close-button\">&times;</span>\n//     <div class=\"modal-left\">\n//           <img src=\"${posterPath}\" alt=\"${title}\" id=\"modalPoster\"/>\n//         </div>\n//     <div class=\"modal-right\">\n//       <h3 id=\"modalTitle\">${title.toUpperCase()}</h3>\n//       <p>Średnia ocena: <span id=\"modalRating\">${vote_average}</span></p>\n//       <p>Popularność: <span id=\"modalPopularity\">${popularity}</span></p>\n//       <p>Oryginalny tytuł: <span id=\"modalOriginalTitle\">${original_title}</span></p>\n//       <p>Gatunek: <span id=\"modalGenres\">${genreNames}</span></p>\n//       <p>Opis: <span id=\"modalOverview\">${overview}</span></p>\n//       <div class=\"modal-buttons\">\n//         <button id=\"watchlistButton\">Dodaj do obejrzenia</button>\n//         <button id=\"watchedButton\" data-action=\"watch\">Dodaj do obejrzanych</button>\n//       </div>\n//       <p><a id=\"trailerLink\" target=\"_blank\" href=\"${trailerLinkUrl}\">Obejrzyj trailer</a></p>\n//     </div>\n//   </div>`;\n//   },\n// );\n\n// modal.insertAdjacentHTML('beforeend', detailsOfClickedMovie);\n// } catch (error) {\n//   console.error(error);\n","import { Notify } from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\nimport { handleMovieClick } from './modal-movie';\nimport { drawMovies } from './draw-movie';\n\nconst watchedButton = document.querySelector('#watchedButtonLibrary');\nlet watchlist = JSON.parse(localStorage.getItem('movieWatchlist')) || [];\n\nexport function addToWatchlist(movieData) {\n  const movieId = movieData.id;\n  const isMovieInWatchlist = watchlist.some(movieInWatchlist => {\n    if (movieInWatchlist.id === movieId) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n\n  if (!isMovieInWatchlist) {\n    watchlist.push(movieData);\n    localStorage.setItem('movieWatchlist', JSON.stringify(watchlist));\n    Notify.success(`Added movie \"${movieData.title}\" to watchlist.`);\n  } else {\n    Notify.failure(`Movie \"${movieData.title}\" is already in watchlist.`);\n  }\n}\n\nexport function displayWatchlist() {\n  console.log(queue);\n}\n"],"names":["$7IoHk","parcelRequire","document","querySelector","$4886da4e258176fd$var$watchlist","JSON","parse","localStorage","getItem","$4886da4e258176fd$export$9d58921fce66163d","movieData","movieId","id","some","movieInWatchlist","Notify","failure","title","push","setItem","stringify","success","$a898f20bd771b561$var$modal","getElementById","$a898f20bd771b561$var$modalPoster","$a898f20bd771b561$var$modalTitle","$a898f20bd771b561$var$modalRating","$a898f20bd771b561$var$modalPopularity","$a898f20bd771b561$var$modalOriginalTitle","$a898f20bd771b561$var$modalGenres","$a898f20bd771b561$var$modalOverview","$a898f20bd771b561$var$watchedButton","$a898f20bd771b561$var$watchlistButton","$a898f20bd771b561$var$trailerLink","$a898f20bd771b561$var$movieData","$a898f20bd771b561$var$genres","async","$a898f20bd771b561$var$fetchGenreOnce","genreId","length","$knVcn","fetchGenres","foundGenre","find","genre","name","$a898f20bd771b561$var$que","$82620ba3e0e3cf2d$export$30665681cb9a2b60","$a898f20bd771b561$var$watched","$a898f20bd771b561$var$closeModal","style","display","removeEventListener","$a898f20bd771b561$var$handleAnyOutsideClick","$a898f20bd771b561$var$handleEscKey","event","key","target","addEventListener","currentPage","$fMaiS","drawMovies","error","console","movieElement","closest","log","dataset","movieid","$lN2wz","getFilmDetails","posterPath","poster_path","src","alt","textContent","toUpperCase","vote_average","popularity","original_title","genreNames","genres","map","resolvedGenreNames","Promise","all","overview","href","$a898f20bd771b561$var$openModal","$82620ba3e0e3cf2d$var$queue","movieInQueue"],"version":3,"file":"index.6955e2d0.js.map"}