{"mappings":"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","sources":["src/js/add-queue.js","src/js/add-watchlist.js","src/js/modal-movie.js"],"sourcesContent":["import { Notify } from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\nimport { handleMovieClick } from './modal-movie';\n\nconst queueButton = document.querySelector('#queueButtonLibrary');\n\nconst savedMovies = JSON.parse(localStorage.getItem('movieQueue')) || [];\nconst containerOfSavedMovies = document.querySelector('.library');\nconst BASE_POSTER_PATH = 'https://image.tmdb.org/t/p/w500';\n\n\nexport function addToQueue(movieData) {\n  const movieId = movieData.id;\n  const isMovieInQueue = savedMovies.some(movieInQueue => {\n    if (movieInQueue.id === movieId) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n\n  if (!isMovieInQueue) {\n    savedMovies.push(movieData);\n    localStorage.setItem('movieQueue', JSON.stringify(savedMovies));\n    Notify.success(`Added movie \"${movieData.title}\" to queue list.`);\n  } else {\n    Notify.failure(`Movie \"${movieData.title}\" is already in queue list.`);\n  }\n}\n\n\nasync function displaySavedMovies(savedMovies) {\n  try {\n    containerOfSavedMovies.innerHTML = '';\n    const galleryOfSavedMovies = savedMovies\n      .map(({ poster_path, genres, id, release_date, title, vote_average }) => {\n        const posterPath = poster_path\n          ? `${BASE_POSTER_PATH}${poster_path}`\n          : 'https://moviereelist.com/wp-content/uploads/2019/07/poster-placeholder.jpg';\n\n        const queueMovieGenres = genres;\n\n        const genreNames = queueMovieGenres\n          .map(genre => {\n            return genre.name ? genre.name : 'Unknown Genre';\n          })\n          .join(', ');\n        const voteAverage = vote_average.toFixed(1);\n        return `<li class=\"library__list-item\" data-movie-id=\"${id}\">\n            <img src=\"${posterPath}\" alt=\"${title}\" movie-id=\"${id}\"/>\n            <h3>${title.toUpperCase()}</h3>\n            <p>${genreNames} | <span>${release_date}</span></p><div class=\"vote-average\">${voteAverage}</div>\n          </li>`;\n      })\n      .join('');\n\n    containerOfSavedMovies.insertAdjacentHTML('beforeend', galleryOfSavedMovies);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n// queueButton.addEventListener('click', () => {\n//   displaySavedMovies(savedMovies);\n// });\n\n","import { Notify } from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\nimport { handleMovieClick } from './modal-movie';\nimport { drawMovies } from './draw-movie';\n\n// const watchedButton = document.querySelector('#watchedButtonLibrary');\nlet watchlist = JSON.parse(localStorage.getItem('movieWatchlist')) || [];\nconsole.log(watchlist);\nexport function addToWatchlist(movieData) {\n  const movieId = movieData.id;\n  const isMovieInWatchlist = watchlist.some(movieInWatchlist => {\n    if (movieInWatchlist.id === movieId) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n\n  if (!isMovieInWatchlist) {\n    watchlist.push(movieData);\n    localStorage.setItem('movieWatchlist', JSON.stringify(watchlist));\n    Notify.success(`Added movie \"${movieData.title}\" to watchlist.`);\n  } else {\n    Notify.failure(`Movie \"${movieData.title}\" is already in watchlist.`);\n  }\n}\n\nexport function displayWatchlist(watchlist) {\n  console.log(watchlist);\n}\n","import { addToQueue } from './add-queue';\nimport { addToWatchlist } from './add-watchlist.js';\nimport { fetchGenres } from './fetch-genres.js';\nimport { drawMovies } from './draw-movie.js';\nimport { getFilmDetails } from './fetch.js';\n\nconst modal = document.getElementById('movieModal');\n\nconst modalPoster = modal.querySelector('#modalPoster');\nconst modalTitle = modal.querySelector('#modalTitle');\nconst modalRating = modal.querySelector('#modalRating');\nconst modalPopularity = modal.querySelector('#modalPopularity');\nconst modalOriginalTitle = modal.querySelector('#modalOriginalTitle');\nconst modalGenres = modal.querySelector('#modalGenres');\nconst modalOverview = modal.querySelector('#modalOverview');\nconst watchedButton = modal.querySelector('#watchedButton'); // dodaj do obejrzanych\nconst watchlistButton = modal.querySelector('#watchlistButton'); // dodaj do kolejki\nconst trailerLink = modal.querySelector('#trailerLink');\n\nconst BASE_POSTER_PATH = 'https://image.tmdb.org/t/p/w500';\n\nlet movieData;\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  let currentPage = 1;\n\n  const loadMoreMovies = async () => {\n    try {\n      await drawMovies('', currentPage, 15);\n      currentPage++;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const loadMoreButton = document.getElementById('loadMore');\n  loadMoreButton.addEventListener('click', loadMoreMovies);\n});\n\nasync function openModal(movieData) {\n  console.log(movieData);\n  const posterPath = movieData.poster_path\n    ? `${BASE_POSTER_PATH}${movieData.poster_path}`\n    : 'https://moviereelist.com/wp-content/uploads/2019/07/poster-placeholder.jpg';\n\n  modalPoster.src = posterPath;\n  modalPoster.alt = movieData.title;\n\n  modalTitle.textContent = movieData.title.toUpperCase();\n  modalRating.textContent = `${movieData.vote_average} / ${movieData.vote_count}`;\n  modalPopularity.textContent = movieData.popularity;\n  modalOriginalTitle.textContent = movieData.original_title;\n\n  const genres = movieData.genres;\n\n  const genreNames = genres\n    .map(genre => {\n      return genre.name ? genre.name : 'Unknown Genre';\n    })\n    .join(', ');\n\n  modalGenres.textContent = genreNames;\n\n  modalOverview.textContent = movieData.overview;\n\n  watchedButton.addEventListener('click', watched, true);\n\n  watchlistButton.addEventListener('click', que, true); // dodaj do kolejki\n\n  trailerLink.href = `https://www.youtube.com/results?search_query=${movieData.title}+trailer`;\n  modal.style.display = 'block';\n\n  // Dodaj obsługę zdarzenia klawisza \"Esc\" po otwarciu modala.\n  document.addEventListener('keydown', handleEscKey);\n\n  // Dodaj obsługę zamykania modala po kliknięciu w obszar poza nim.\n  modal.addEventListener('click', handleAnyOutsideClick);\n}\n\nfunction que() {\n  addToQueue(movieData); // dodaj do kolejki\n}\n\nfunction watched() {\n  addToWatchlist(movieData);\n}\n\nfunction closeModal() {\n  modal.style.display = 'none';\n\n  watchedButton.removeEventListener('click', watched, true);\n  watchlistButton.removeEventListener('click', que, true);\n\n  modal.removeEventListener('click', handleAnyOutsideClick);\n  // Usuń obsługę zdarzenia klawisza \"Esc\" po zamknięciu modala.\n  document.removeEventListener('keydown', handleEscKey);\n}\n\n// Dodaj funkcję obsługującą zdarzenie naciśnięcia klawisza \"Esc\".\nfunction handleEscKey(event) {\n  if (event.key === 'Escape') {\n    closeModal();\n  }\n}\n\nfunction handleAnyOutsideClick(event) {\n  if (event.target === modal) {\n    closeModal();\n  }\n}\n\nexport async function handleMovieClick(event) {\n  try {\n    const movieElement = event.target.closest('.gallery__list-item');\n    console.log(movieElement);\n    // const libraryMovieElement = event.target.closest('.librarylist-item');\n\n    if (movieElement) {\n      const movieId = movieElement.dataset.movieid;\n      console.log(movieId);\n      movieData = await getFilmDetails(movieId);\n\n      await openModal(movieData);\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\n\ndocument.addEventListener('click', handleMovieClick);\n\nconst modalCloseButton = document.getElementById('modalCloseButton');\nmodalCloseButton.addEventListener('click', closeModal);\n"],"names":["$7IoHk","parcelRequire","$4886da4e258176fd$var$watchlist","JSON","parse","localStorage","getItem","$4886da4e258176fd$export$9d58921fce66163d","movieData","movieId","id","some","movieInWatchlist","Notify","failure","title","push","setItem","stringify","success","console","log","$a898f20bd771b561$var$modal","document","getElementById","$a898f20bd771b561$var$modalPoster","querySelector","$a898f20bd771b561$var$modalTitle","$a898f20bd771b561$var$modalRating","$a898f20bd771b561$var$modalPopularity","$a898f20bd771b561$var$modalOriginalTitle","$a898f20bd771b561$var$modalGenres","$a898f20bd771b561$var$modalOverview","$a898f20bd771b561$var$watchedButton","$a898f20bd771b561$var$watchlistButton","$a898f20bd771b561$var$trailerLink","$a898f20bd771b561$var$movieData","$a898f20bd771b561$var$que","$82620ba3e0e3cf2d$export$30665681cb9a2b60","$a898f20bd771b561$var$watched","$a898f20bd771b561$var$closeModal","style","display","removeEventListener","$a898f20bd771b561$var$handleAnyOutsideClick","$a898f20bd771b561$var$handleEscKey","event","key","target","addEventListener","currentPage","async","$fMaiS","drawMovies","error","movieElement","closest","dataset","movieid","$lN2wz","getFilmDetails","posterPath","poster_path","src","alt","textContent","toUpperCase","vote_average","vote_count","popularity","original_title","genreNames","genres","map","genre","name","join","overview","href","$a898f20bd771b561$var$openModal","$82620ba3e0e3cf2d$var$savedMovies","movieInQueue"],"version":3,"file":"index.5c74e82f.js.map"}