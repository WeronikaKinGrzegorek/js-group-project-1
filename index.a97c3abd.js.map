{"mappings":"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","sources":["src/js/add-queue.js","src/js/modal-movie.js","src/js/add-watchlist.js"],"sourcesContent":["import { Notify } from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\nimport { handleMovieClick } from './modal-movie';\n\nconst queueButton = document.querySelector('#queueButton');\nlet queue = JSON.parse(localStorage.getItem('movieQueue')) || [];\n\nexport function addToQueue(movieData) {\n  const movieId = movieData.id;\n  const isMovieInQueue = queue.some(movieInQueue => {\n    if (movieInQueue.id === movieId) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n\n  if (!isMovieInQueue) {\n    queue.push(movieData);\n    localStorage.setItem('movieQueue', JSON.stringify(queue));\n    Notify.success(`Added movie \"${movieData.title}\" to queue list.`);\n  } else {\n    Notify.failure(`Movie \"${movieData.title}\" is already in queue list.`);\n  }\n}\n\nexport function displayQueue() {\n  console.log(queue);\n}\n\nqueueButton.addEventListener('click', () => {\n  displayQueue(queue);\n});\n","import { showLoader, hideLoader } from './loader.js';\nimport { addToQueue } from './add-queue';\nimport { addToWatchlist } from './add-watchlist.js';\nimport { fetchGenres } from './fetch-genres.js';\nimport { drawMovies } from './draw-movie.js';\nimport { fetchMovies } from './fetch.js';\n\nconst moviesContainer = document.querySelector('.gallery__list');\n// const apiKey = '55e390226d2f3f6feba5afe684a5a044';\n// const loadMoreButton = document.getElementById('loadMore');\n// let currentPage = 1;\n// let data;\nlet genres = [];\n\nasync function fetchGenreOnce(genreId) {\n  if (genres.length === 0) {\n    genres = await fetchGenres();\n  }\n  const foundGenre = genres.find(genre => genre.id === genreId);\n  return foundGenre ? foundGenre.name : 'Nieznany';\n}\n\nfetchGenreOnce();\n\nfunction formatDate(dateString) {\n  const date = new Date(dateString);\n  return date.getFullYear();\n}\n\nasync function openModal(movieData) {\n  const modal = document.getElementById('movieModal');\n  const modalContent = modal.querySelector('.modal-content');\n  const modalPoster = modal.querySelector('#modalPoster');\n  modalPoster.src = `https://image.tmdb.org/t/p/w300${movieData.poster_path}`;\n  modalPoster.alt = movieData.title;\n  const modalTitle = modal.querySelector('#modalTitle');\n  modalTitle.textContent = movieData.title.toUpperCase();\n  const modalRating = modal.querySelector('#modalRating');\n  modalRating.textContent = movieData.vote_average;\n  const modalPopularity = modal.querySelector('#modalPopularity');\n  modalPopularity.textContent = movieData.popularity;\n  const modalOriginalTitle = modal.querySelector('#modalOriginalTitle');\n  modalOriginalTitle.textContent = movieData.original_title;\n  const genreIds = movieData.genre_ids;\n  const genreNames = genreIds.map(async genreId => await fetchGenreOnce(genreId));\n  const resolvedGenreNames = await Promise.all(genreNames);\n  const modalGenres = modal.querySelector('#modalGenres');\n  modalGenres.textContent = resolvedGenreNames.join(', ');\n  const modalOverview = modal.querySelector('#modalOverview');\n  modalOverview.textContent = movieData.overview;\n  const watchedButton = modal.querySelector('#watchedButton');\n  watchedButton.addEventListener('click', () => {\n    addToWatchlist(movieData);\n  });\n  const watchlistButton = modal.querySelector('#watchlistButton');\n  watchlistButton.addEventListener('click', () => {\n    addToQueue(movieData);\n  });\n  const trailerLink = modal.querySelector('#trailerLink');\n  trailerLink.href = `https://www.youtube.com/results?search_query=${movieData.title}+trailer`;\n  modal.style.display = 'block';\n\n  // Dodaj obsługę zdarzenia klawisza \"Esc\" po otwarciu modala.\n  document.addEventListener('keydown', handleEscKey);\n\n  // Dodaj obsługę zamykania modala po kliknięciu w obszar poza nim.\n  modal.addEventListener('click', function (event) {\n    if (event.target === modal) {\n      closeModal();\n    }\n  });\n}\n\nfunction closeModal() {\n  const modal = document.getElementById('movieModal');\n  modal.style.display = 'none';\n\n  // Usuń obsługę zdarzenia klawisza \"Esc\" po zamknięciu modala.\n  document.removeEventListener('keydown', handleEscKey);\n}\n\n// Dodaj funkcję obsługującą zdarzenie naciśnięcia klawisza \"Esc\".\nfunction handleEscKey(event) {\n  if (event.key === 'Escape') {\n    closeModal();\n  }\n}\n\nexport async function handleMovieClick(event) {\n  try {\n    const moviesDetails = await fetchMovies();\n    console.log(moviesDetails);\n    const movieElement = event.target.closest('.gallery__list-item');\n\n    if (movieElement) {\n      const movieIndex = Array.from(moviesContainer.children).indexOf(movieElement);\n      console.log(movieIndex);\n      const movieData = moviesDetails[movieIndex];\n\n      openModal(movieData);\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\n\ndocument.addEventListener('click', handleMovieClick);\n\nconst modalCloseButton = document.getElementById('modalCloseButton');\nmodalCloseButton.addEventListener('click', closeModal);\n\n// async function fetchMoviesPopular() {\n//   const url = `https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&language=en-US&page=${currentPage}`;\n//   try {\n//     const response = await fetch(url);\n//     data = await response.json();\n\n//     if (genres.length === 0) {\n//       genres = await fetchGenres();\n//     }\n\n//     for (const movie of data.results) {\n//       const movieElement = document.createElement('div');\n//       movieElement.classList.add('movie');\n\n//       const genreNames = await Promise.all(\n//         movie.genre_ids.map(async genreId => await fetchGenreOnce(genreId)),\n//       );\n\n//       const releaseYear = formatDate(movie.release_date);\n\n//       movieElement.innerHTML = `\n//         <div class=\"movie-content\">\n//           <img src=\"https://image.tmdb.org/t/p/w300${movie.poster_path}\" alt=\"${movie.title}\">\n//           <h3 class=\"movie-title\">${movie.title.toUpperCase()}</h3>\n//           <p class=\"movie-info\">\n//             ${genreNames.join(', ')} | ${releaseYear}\n//           </p>\n//         </div>\n//       `;\n//       moviesContainer.appendChild(movieElement);\n//     }\n//     hideLoader();\n//     currentPage++;\n//   } catch (error) {\n//     console.error('Błąd pobierania danych:', error);\n//   }\n// }\n\n// loadMoreButton.addEventListener('click', fetchMoviesPopular);\n","import { Notify } from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\nimport { handleMovieClick } from './modal-movie';\nimport { drawMovies } from './draw-movie';\n\nconst watchedButton = document.querySelector('#watchlist');\nlet watchlist = JSON.parse(localStorage.getItem('movieWatchlist')) || [];\n\nexport function addToWatchlist(movieData) {\n  const movieId = movieData.id;\n  const isMovieInWatchlist = watchlist.some(movieInWatchlist => {\n    if (movieInWatchlist.id === movieId) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n\n  if (!isMovieInWatchlist) {\n    watchlist.push(movieData);\n    localStorage.setItem('movieWatchlist', JSON.stringify(watchlist));\n    Notify.success(`Added movie \"${movieData.title}\" to watchlist.`);\n  } else {\n    Notify.failure(`Movie \"${movieData.title}\" is already in watchlist.`);\n  }\n}\n\nexport function displayWatchlist() {\n  console.log(queue);\n}\n"],"names":["$7IoHk","parcelRequire","document","querySelector","$4886da4e258176fd$var$watchlist","JSON","parse","localStorage","getItem","$4886da4e258176fd$export$9d58921fce66163d","movieData","movieId","id","some","movieInWatchlist","Notify","failure","title","push","setItem","stringify","success","$a898f20bd771b561$var$moviesContainer","$a898f20bd771b561$var$genres","async","$a898f20bd771b561$var$fetchGenreOnce","genreId","length","$knVcn","fetchGenres","foundGenre","find","genre","name","$a898f20bd771b561$var$openModal","modal","getElementById","modalPoster","src","poster_path","alt","textContent","toUpperCase","vote_average","popularity","original_title","genreNames","genre_ids","map","resolvedGenreNames","Promise","all","join","overview","addEventListener","$82620ba3e0e3cf2d$export$30665681cb9a2b60","href","style","display","$a898f20bd771b561$var$handleEscKey","event","target","$a898f20bd771b561$var$closeModal","removeEventListener","key","moviesDetails","$lN2wz","fetchMovies","console","log","movieElement","closest","movieIndex","Array","from","children","indexOf","error","$82620ba3e0e3cf2d$var$queueButton","$82620ba3e0e3cf2d$var$queue","movieInQueue"],"version":3,"file":"index.a97c3abd.js.map"}